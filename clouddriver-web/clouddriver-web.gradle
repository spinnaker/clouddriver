apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage'

ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

configurations.all {
  exclude group: 'javax.servlet', module: 'servlet-api'
  exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
  compile project(':kato:kato-web')
  compile project(':oort:oort-web')
  compile project(':mort:mort-web')
  compile 'javax.ws.rs:jsr311-api:1.1.1'
  runtime spinnaker.dependency('kork')
  compile spinnaker.dependency('korkWeb')
  compile spinnaker.dependency('bootActuator')
  compile spinnaker.dependency('bootDataRest')
  testCompile ("org.springframework.boot:spring-boot-starter-test")
  //this brings in the jetty GzipFilter which boot will autoconfigure
  runtime 'org.eclipse.jetty:jetty-servlets:9.2.11.v20150529'
}

tasks.bootRepackage.enabled = false

applicationName = 'clouddriver'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom", "-Dspring.config.location=/opt/spinnaker/config/"]
applicationDistribution.from(project.file('config')) {
  into 'config'
}

sourceSets {
  main {
    resources {
      srcDir 'src/main/resources'
      srcDir 'config'
    }
  }
}

jar {
  doFirst {
    exclude "${rootProject.name}.yml"
  }
}

startScripts {
  doLast {
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '\n if [ -f /etc/default/spinnaker ];then \n set -a\n . /etc/default/spinnaker \n set +a\n fi \n DEFAULT_JVM_OPTS=')
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
  packageName = project.applicationName
  version = toVers(project.version.toString())
  release '4'
  into "/opt/${project.applicationName}"
  from ("${project.buildDir}/install/${project.applicationName}")

// installer scripts
  postInstall = file('scripts/postInstall.sh')
  postUninstall = file('scripts/postUninstall.sh')

  from(file('src/main/resources/clouddriver.conf')) {
    into('/etc/init')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

  from(file('src/main/resources/clouddriver')) {
    into('/etc/logrotate.d')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }
}

buildDeb {
  dependsOn installApp
}
