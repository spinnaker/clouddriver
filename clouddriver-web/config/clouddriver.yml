server:
  port: 7002
  ssl:
    enabled: false

redis:
  connection: redis://localhost:6379
  scheduler: default
  parallelism: -1

services:
  front50:
    baseUrl: http://localhost:8080

management.health.elasticsearch.enabled: false

swagger:
  enabled: true
  title: clouddriver
  description: Cloud read and write operations
  contact: admin@host.net
  patterns:
    - .*elasticIps.*
    - .*cache.*
    - .*instance.*
    - .*search.*
    - .*security.*
    - .*vpcs.*
    - .*credentials.*
    - .*networks.*
    - .*subnets.*
    - .*ops.*
    - .*task.*
    - .*applications.*
    - .*aws.*
    - .*azure.*
    - .*appengine.*
    - .*gce.*
    - .*kubernetes.*
    - .*openstack.*
    - .*instances.*
    - .*reports.*
    - .*docker.*
    - .*job.*
    - .*process.*
    - .*dcos.*

default:
  # legacyServerPort is a non-ssl listener, if ssl is enabled. -1 to disable
  legacyServerPort: -1
  account:
    env: default

aws:
  enabled: ${AWS_ENABLED:false}
  # proxy:
  #  proxyHost: 10.0.0.54
  #  proxyPort: 8888
  #  proxyUsername: foo
  #  proxyPassword: foo
  #  proxyDomain: foo
  #  proxyWorkstation: foo
  #  protocol: HTTP
  defaults:
    iamRole: FooRole
    unknownInstanceTypeBlockDevice:
      deviceName: /dev/sdb
      size: 40
    instanceClassBlockDevices:
    - instanceClass: m3
      blockDevices:
      - deviceName: /dev/sdb
        virtualName: ephemeral0
      - deviceName: /dev/sdc
        virtualName: ephemeral1
  defaultRegions:
    - name: us-east-1
  defaultKeyPairTemplate: '{{name}}-keypair'

  # an empty list means we are directly managing the AWS account we have credentials for (named default.account.env)
  # see prod profile section below for an example configuration to manage other accounts via STS assume role
  accounts: []

azure:
  enabled: ${AZURE_ENABLED:false}
  defaults:

  accounts:
    - name: my-azure-account
      clientId: ${AZURE_CLIENT_ID}
      appKey: ${AZURE_APPKEY}
      tenantId: ${AZURE_TENANT_ID}
      subscriptionId: ${AZURE_SUBSCRIPTION_ID}
      regions: ["westus", "eastus", "eastus2", "centralus"]
      defaultResourceGroup: ${AZURE_DEFAULT_RESOURCE_GROUP:"SpinnakerDefault"}
      defaultKeyVault: ${AZURE_DEFAULT_KEYVAULT}
      vmImages:
      - publisher: "MicrosoftWindowsServer"
        offer: "WindowsServer"
        sku: "2012-R2-Datacenter"
        version: "4.0.20151214"
      - publisher: "Canonical"
        offer: "UbuntuServer"
        sku: "14.04.5-LTS"
        version: "14.04.201612130"
      - publisher: "credativ"
        offer: "Debian"
        sku: "8"
        version: "8.0.201602010"
      - publisher: "OpenLogic"
        offer: "CentOS"
        sku: "7.1"
        version: "7.1.20150731"
      - publisher: "SUSE"
        offer: "openSUSE-Leap"
        sku: "42.1"
        version: "2016.01.14"
      - publisher: "SUSE"
        offer: "SLES"
        sku: "12-SP1"
        version: "2015.12.15"
  # Example how to set the Azure storage connection string related entries for retrieving the list of available custom VM images,
  #  where "scs" represents the Azure Storage connection string and "blobDir" is the relative path to the custom images container
  #
  #    customImages:
  #    - scs: ${AZURE_SCS1}
  #      blobDir: "system/Microsoft.Compute/Images/vhds"
  #      osType: "Windows"
  #      region: "westus"
  #    - scs: ${AZURE_SCS2}
  #      blobDir: "vhds"
  #      osType: "Linux"
  #      region: "westus"

appengine:
  enabled: false

google:
  enabled: false
  baseImageProjects:
  - centos-cloud
  - coreos-cloud
  - debian-cloud
  - opensuse-cloud
  - rhel-cloud
  - suse-cloud
  - ubuntu-os-cloud
  - windows-cloud
  defaults:
    instanceTypeDisks:
    - instanceType: n1-standard-1
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instanceType: n1-standard-2
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instanceType: n1-standard-4
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instanceType: n1-standard-8
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instanceType: n1-standard-16
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instanceType: n1-standard-32
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instanceType: f1-micro
      supportsLocalSSD: false
      disks:
      - type: pd-standard
        sizeGb: 10
    - instanceType: g1-small
      supportsLocalSSD: false
      disks:
      - type: pd-standard
        sizeGb: 10
    - instance-type: n1-highmem-2
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highmem-4
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highmem-8
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highmem-16
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highmem-32
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highcpu-2
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highcpu-4
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highcpu-8
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highcpu-16
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: n1-highcpu-32
      disks:
      - type: pd-ssd
        sizeGb: 10
    - instance-type: default
      disks:
      - type: pd-standard
        sizeGb: 10

openstack:
  enabled: ${OS_ENABLED:false}
  accounts:
    - name: my-openstack-account
      environment: test
      accountType: main
      username: ${OS_USERNAME:'username'}
      password: ${OS_PASSWORD:'password'}
      projectName: ${OS_PROJECT_NAME:''}
      domainName: Default
      authUrl: ${OS_AUTH_URL:''}
      regions: ${OS_REGIONS:''}
      insecure: ${OS_INSECURE:false}
      # Replacing the Heat template is not recommended
      # The implementation is tightly coupled with the suppplied template
      # heatTemplatePath: /path/to/custom/heat/template
      lbaas:
        pollTimeout: ${OS_LBAAS_POLL_TIMEOUT:60}
        pollInterval: ${OS_LBAAS_POLL_INTERVAL:5}

kubernetes:
  enabled: false

dockerRegistry:
  enabled: ${DOCKER_REGISTRY_ENABLED:false}

dcos:
  enabled: false

cf:
  enabled: ${providers.cf.enabled:false}
  accounts:
    - name: ${providers.cf.primaryCredentials.name}
      api: ${providers.cf.primaryCredentials.api}
      console: ${providers.cf.primaryCredentials.console}
      org: ${providers.cf.defaultOrg}
      space: ${providers.cf.defaultSpace}
      username: ${cf.account.name}
      password: ${cf.account.password}
      artifactUsername: ${cf.repo.username}
      artifactPassword: ${cf.repo.password}

oraclebmcs:
  enabled: ${ORACLEBMCS_ENABLED:false}

spring:
  jackson:
    mapper:
      SORT_PROPERTIES_ALPHABETICALLY: true
    serialization:
      ORDER_MAP_ENTRIES_BY_KEYS: true

operations.security:
  onMissingSecuredCheck: WARN
  onMissingValidator: WARN

# Turn on when confirming Fiat authorization checks
# logging.level.com.netflix.spinnaker.clouddriver.listeners: DEBUG

---

spring:
  profiles: prod

# example https configuration for client auth to services:
#default:
  # legacyServerPort is a non-ssl listener when the main listener has SSL enabled
  #legacyServerPort: 8501

#server:
  #ssl:
    # enabled: true
    # keyStore: clouddriver-keystore.p12
    # keyStoreType: PKCS12
    # keyStorePassword: changeme
    # trustStore: services-truststore.p12
    # trustStoreType: PKCS12
    # trustStorePassword: changeme
    # clientAuth: need

#aws:
  # example configuration for managing multiple accounts
  # role in managed account to assume:
  #defaultAssumeRole: role/myrole
  #accounts:
    # - name: account-display-name
    #   defaultKeyPair: key-pair
    #   edda: http://edda.{{region}}.host.net:7001
    #   discovery: "http://{{region}}.discovery.host.net:7001/eureka"
    #   accountId: 123456789012
    #   regions: #override default regions
    #     - name: us-east-1
    #     - name: ap-northeast-1

---

# local profile is activated by default when running the application - override values here for local development
#  for production, set spring.profiles.active to select the appropriate profile for your environment
spring:
  profiles: local

# an AWSCredentialsProvider that obtains session credentials via SSH through a bastion instance (useful for local development):
#bastion:
#  enabled: false
#  port: 22
#  proxyRegion: us-west-1
#  proxyCluster: my-credentials-cluster
