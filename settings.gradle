/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

rootProject.name = "clouddriver"

enum Platform {
  ALL,
  APPENGINE,
  AWS, // Any thoughts on renaming this provider to EC2?
  AZURE,
  CLOUDFOUNDRY,
  DCOS,
  GCE,
  GCP,
  KUBERNETES,
  OPENSTACK,
  ORACLE,
  TITUS,
}

// Core requirements.
include 'cats:cats-core',
        'cats:cats-redis',
        'cats:cats-dynomite',
        'cats:cats-test',
        'clouddriver-artifacts', // Will need to be detangled.
        'clouddriver-core',
        'clouddriver-elasticsearch',
        'clouddriver-security', // Detangle.
        'clouddriver-web'

def includePlatform(Platform platform) {
  switch(platform) {
    case Platform.APPENGINE:
      include 'clouddriver-appengine',
              'clouddriver-google-common'
      break
    case Platform.AWS:
      include 'clouddriver-aws',
              'clouddriver-ecs',
              'clouddriver-eureka', // Pull into separate "Discover" platform, along with cd-consul?
              'clouddriver-elasticsearch-aws'
      break
    case Platform.AZURE:
      include 'clouddriver-azure'
      break
    case Platform.CLOUDFOUNDRY:
      include 'clouddriver-cloudfoundry'
      break
    case Platform.DCOS:
      include 'clouddriver-dcos'
      break
    case Platform.GCE:
      include 'clouddriver-consul',
              'clouddriver-google',
              'clouddriver-google-common'
      break
    case Platform.GCP:
      includePlatform(Platform.APPENGINE)
      includePlatform(Platform.GCE)
      includePlatform(Platform.KUBERNETES)
      break
    case Platform.KUBERNETES:
      include 'clouddriver-kubernetes',
              'clouddriver-docker'
      break
    case  Platform.OPENSTACK:
      include 'clouddriver-openstack'
      break
    case Platform.ORACLE:
      include 'clouddriver-oracle'
      break
    case Platform.TITUS:
      includePlatform(Platform.AWS)
      include 'clouddriver-titus'
      break
    case Platform.ALL: // fallthrough
    default:
      includePlatform(Platform.APPENGINE)
      includePlatform(Platform.AWS)
      includePlatform(Platform.AZURE)
      includePlatform(Platform.CLOUDFOUNDRY)
      includePlatform(Platform.DCOS)
      includePlatform(Platform.GCE)
      includePlatform(Platform.GCP)
      includePlatform(Platform.KUBERNETES)
      includePlatform(Platform.OPENSTACK)
      includePlatform(Platform.ORACLE)
      includePlatform(Platform.TITUS)
      break
  }
}

includePlatforms.split(",").each {
  includePlatform(it)
}

def setBuildFile(project) {
  project.buildFileName = "${project.name}.gradle"
  project.children.each {
    setBuildFile(it)
  }
}

rootProject.children.each {
  setBuildFile(it)
}

