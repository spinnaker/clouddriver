/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

['fiat', 'kork'].each { prj ->
  String propName = "${prj}Composite"
  String projectPath = "../$prj"
  if (settings.ext.has(propName) && Boolean.parseBoolean(settings.ext.get(propName) as String)) {
    includeBuild projectPath
  }
}

enableFeaturePreview("VERSION_ORDERING_V2")

rootProject.name = "clouddriver"

def cloudProviderProjects = [
//  'alicloud' : [':clouddriver-alicloud'],
  'appengine':  [':clouddriver-appengine', ':clouddriver-google-common'],
  'aws': [':clouddriver-aws', ':clouddriver-ecs', ':clouddriver-eureka', ':clouddriver-elasticsearch-aws', ':clouddriver-lambda'], // Pull cd-eureka separate "Discover" platform, along with cd-consul?
  'azure': [':clouddriver-azure'],
  'cloudfoundry': [':clouddriver-cloudfoundry'],
//  'dcos': [':clouddriver-dcos'],
  'gce': [':clouddriver-consul', ':clouddriver-google', ':clouddriver-google-common'],
  'huaweicloud': [':clouddriver-huaweicloud'],
  'kubernetes': [':clouddriver-kubernetes'],
//  'oracle': [':clouddriver-oracle'],
  'tencentcloud': [':clouddriver-tencentcloud']
]
cloudProviderProjects.put('gcp', cloudProviderProjects['appengine'] + cloudProviderProjects['gce'] + cloudProviderProjects['kubernetes'])
cloudProviderProjects.put('titus', cloudProviderProjects['aws'] + ':clouddriver-titus' + ':clouddriver-docker')
cloudProviderProjects.put('all', cloudProviderProjects.collectMany {_, proj -> proj}) // Include all cloud providers.

String icp = settings.ext.has('includeCloudProviders') ? settings.ext.get('includeCloudProviders') : 'all'

// Set as an ext variable so that build scripts can access it
gradle.ext.includedCloudProviderProjects = icp.split(',')
  .collectMany { cloudProviderProjects[it.toLowerCase()] }
  .toSet()
  .toList()

include 'cats:cats-core',
  'cats:cats-redis',
  'cats:cats-test',
  'cats:cats-sql',
  'clouddriver-api',
  'clouddriver-artifacts',
  'clouddriver-bom',
  'clouddriver-core',
  'clouddriver-core-tck',
  'clouddriver-elasticsearch',
  'clouddriver-event',
  'clouddriver-saga',
  'clouddriver-saga-test',
  'clouddriver-scattergather',
  'clouddriver-security',
  'clouddriver-sql',
  'clouddriver-sql-mysql',
  'clouddriver-web'
include(*gradle.ext.includedCloudProviderProjects)

def setBuildFile(project) {
  project.buildFileName = "${project.name}.gradle"
  project.children.each {
    setBuildFile(it)
  }
}

rootProject.children.each {
  setBuildFile(it)
}
