heat_template_version: 2015-10-15
description: Auto scaling group for Spinnaker
parameters:
  flavor:
    type: string
    description: Flavor used by the web servers
  image:
    type: string
    description: Image used for servers
  max_size:
    type: number
    description: Maximum cluster size
  min_size:
    type: number
    description: Minimum cluster size
  desired_size:
    type: number
    description: Desired cluster size
  network_id:
    type: string
    description: Network used by the servers
  load_balancers:
    type: comma_delimited_list
    description: Comma-separated string of load balancers to associate to the stack. This is not used in the stack and is defined for auditing purposes.
    default: []
  security_groups:
    type: comma_delimited_list
    description: Comma-separated string of security groups to use
  subnet_id:
    type: string
    description: Subnet used to allocate a fixed IP for each server
  autoscaling_type:
    type: string
    description: Type of autoscaling to perform. can be cpu_util, network.incoming.bytes.rate, or network.outgoing.bytes.rate
    default: cpu_util
  scaleup_cooldown:
    type: number
    description: Minimum amount of time (in seconds) between scaleup operations
    default: 60
  scaleup_adjustment:
    type: number
    description: Amount by which to change the instance count. Must be positive
    default: 1
  scaleup_period:
    type: number
    description: Amount of time (in seconds) before the scaleup action is taken
    default: 60
  scaleup_threshold:
    type: number
    description: Threshold that causes the scaleup action to occur, if held for scaleup_period seconds
    default: 50
  scaledown_cooldown:
    type: number
    description: Minimum amount of time (in seconds) between scaledown operations
    default: 60
  scaledown_adjustment:
    type: number
    description: Amount by which to change the instance count. Must be negative
    default: -1
  scaledown_period:
    type: number
    description: Amount of time (in seconds) before the scaledown action is taken
    default: 600
  scaledown_threshold:
    type: number
    description: Threshold that causes the scaledown action to occur, if held for scaledown_period seconds
    default: 15
  user_data:
    type: string
    description: raw base64-encoded string that will execute upon server boot, if cloud-init is installed
    default: ""
resources:
  asg:
    type: OS::Heat::AutoScalingGroup
    properties:
      min_size: {get_param: min_size}
      max_size: {get_param: max_size}
      desired_capacity: {get_param: desired_size}
      resource:
        type: asg_resource.yaml
        properties:
          flavor: {get_param: flavor}
          image: {get_param: image}
          # This is used by ceilometer to autoscale against instances that are part of this stack
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
          network_id: {get_param: network_id}
          security_groups: {get_param: security_groups}
          subnet_id: {get_param: subnet_id}
          user_data: {get_param: user_data}
  web_server_scaleup_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: {get_param: scaleup_cooldown}
      scaling_adjustment: {get_param: scaleup_adjustment}
  web_server_scaledown_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: asg}
      cooldown: {get_param: scaledown_cooldown}
      scaling_adjustment: {get_param: scaledown_adjustment}
  meter_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale up if the average meter_name > scaleup_threshold for scaleup_period seconds
      meter_name: {get_param: autoscaling_type}
      statistic: avg
      period: {get_param: scaleup_period}
      evaluation_periods: 1
      threshold: {get_param: scaleup_threshold}
      alarm_actions:
        - {get_attr: [web_server_scaleup_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt
  meter_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale up if the average meter_name < scaledown_threshold for scaledown_period seconds
      meter_name: {get_param: autoscaling_type}
      statistic: avg
      period: {get_param: scaledown_period}
      evaluation_periods: 1
      threshold: {get_param: scaledown_threshold}
      alarm_actions:
        - {get_attr: [web_server_scaledown_policy, alarm_url]}
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt
outputs:
  OS::stack_id:
    value: {get_resource: asg}
  # we need to store subtemplate in asg output from create, as it is required to do an update and there is no native way
  # of obtaining it from a stack
  asg_resource:
    description: asg_resource.yaml template value
    value: {get_file: asg_resource.yaml}
  # we need to store subtemplate in asg output from create, as it is required to do an update and there is no native way
  # of obtaining it from a stack
  asg_member:
    description: asg_member.yaml template value
    value: {get_file: asg_member.yaml}
  scale_up_url:
    description: >
      This URL is the webhook to scale up the autoscaling group.  You
      can invoke the scale-up operation by doing an HTTP POST to this
      URL; no body nor extra headers are needed.
    value: {get_attr: [web_server_scaleup_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the autoscaling group.
      You can invoke the scale-down operation by doing an HTTP POST to
      this URL; no body nor extra headers are needed.
    value: {get_attr: [web_server_scaledown_policy, alarm_url]}
  asg_size:
    description: >
      This is the current size of the auto scaling group.
    value: {get_attr: [asg, current_size]}
