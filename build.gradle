/*
 * Copyright 2014 Netflix, Inc.
 * Copyright (c) 2018, salesforce.com, inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext {
    kotlinVersion = "1.3.10"
    junitPlatformVersion = "1.0.2"
  }

  repositories {
    jcenter()
    maven { url "https://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
    if (spinnakerGradleVersion.endsWith("-SNAPSHOT")) {
      mavenLocal()
    }
  }

  dependencies {
    classpath "com.netflix.spinnaker.gradle:spinnaker-dev-plugin:$spinnakerGradleVersion"
    if (Boolean.valueOf(enablePublishing)) {
      classpath "com.netflix.spinnaker.gradle:spinnaker-gradle-project:$spinnakerGradleVersion"
    }
    classpath "com.netflix.nebula:nebula-kotlin-plugin:$kotlinVersion"
    classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"

  }
}

allprojects {
  group = "com.netflix.spinnaker.clouddriver"
  apply plugin: 'spinnaker.base-project'
  if (Boolean.valueOf(enablePublishing)) {
    apply plugin: 'spinnaker.project'
  }
  apply plugin: 'java-library'
  apply plugin: 'groovy'
  apply plugin: 'nebula.kotlin'

  sourceSets.main.java.srcDirs = []
  sourceSets.main.groovy.srcDirs += ["src/main/java"]

  dependencies {
    implementation platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")

    annotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
    annotationProcessor "org.projectlombok:lombok"
    testAnnotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
    testAnnotationProcessor "org.projectlombok:lombok"
  }

  test {
    testLogging {
      exceptionFormat = 'full'
      if (project.hasProperty('slowTest')) {
        long slow = 250
        try {
          slow = Long.parseLong(project.property('slowTest'))
        } catch (Exception ex) {
        }
        afterTest { desc, result ->
          long duration = result.getEndTime() - result.getStartTime()
          if (duration > slow) {
            logger.warn("test exceeded $slow ms: $desc.className :: $desc.name ($duration milliseconds)")
          }
        }
      }
      minHeapSize = "512m"
      maxHeapSize = "512m"
    }
  }
}

subprojects { project ->
  if ([korkVersion, fiatVersion].any { it.endsWith("-SNAPSHOT") }) {
    logger.info("Enabling mavenLocal")
    repositories {
      mavenLocal()
    }
  }

  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7102'
    }
  }
}

defaultTasks ':clouddriver-web:run'
