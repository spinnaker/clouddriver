/*
 * Copyright 2014 Netflix, Inc.
 * Copyright (c) 2018, salesforce.com, inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext {
    kotlinVersion = "1.3.10"
    junitPlatformVersion = "1.0.2"
  }

  repositories {
    jcenter()
    maven { url "https://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
    if (spinnakerGradleVersion.endsWith("-SNAPSHOT")) {
      mavenLocal()
    }
  }

  dependencies {
    classpath "com.netflix.spinnaker.gradle:spinnaker-dev-plugin:$spinnakerGradleVersion"
    if (Boolean.valueOf(enablePublishing)) {
      classpath "com.netflix.spinnaker.gradle:spinnaker-gradle-project:$spinnakerGradleVersion"
// TODO: nebula-publishing-plugin version override should be removed as soon as spinnaker-gradle-project is updated
// this override is needed to omit compileOnly dependencies from generated pom.xml
      classpath "com.netflix.nebula:nebula-publishing-plugin:12.0.1"
    }
    classpath "com.netflix.nebula:nebula-kotlin-plugin:$kotlinVersion"
    classpath "org.junit.platform:junit-platform-gradle-plugin:${junitPlatformVersion}"
    classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlinVersion"
  }
}

allprojects {
  group = "com.netflix.spinnaker.clouddriver"
  apply plugin: 'spinnaker.base-project'
  if (Boolean.valueOf(enablePublishing)) {
    apply plugin: 'spinnaker.project'
  }

  if (name != "clouddriver-bom") {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'nebula.kotlin'
    apply plugin: "kotlin-allopen"

    sourceSets.main.java.srcDirs = []
    sourceSets.main.groovy.srcDirs += ["src/main/java"]

    dependencies {
      implementation platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")

      // This can be removed once there is a version of error-prone > 2.3.2. In 2.3.0, the
      // @DoNotMock annotation was accidentally removed. It was put back, but hasn't made it into a
      // release yet.
      //
      // In the meantime, kork depends on Guava 28.0, which depends on error-prone. There's no
      // version listed, so Gradle resolves it to the newest version (2.3.2) which breaks the build
      // because of that missing annotation. This block forces the build back to 2.2.0, the latest
      // version that contains @DoNotMock.
      implementation('com.google.errorprone:error_prone_annotations:2.2.0') {
        force = true
      }

      annotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
      annotationProcessor "org.projectlombok:lombok"
      annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
      testAnnotationProcessor platform("com.netflix.spinnaker.kork:kork-bom:$korkVersion")
      testAnnotationProcessor "org.projectlombok:lombok"
      testRuntimeOnly "org.junit.vintage:junit-vintage-engine" // Required for Spock tests to execute along with Junit5 tests.
    }

    test {
      useJUnitPlatform()
      testLogging {
        exceptionFormat = 'full'
        if (project.hasProperty('slowTest')) {
          long slow = 250
          try {
            slow = Long.parseLong(project.property('slowTest'))
          } catch (Exception ex) {
          }
          afterTest { desc, result ->
            long duration = result.getEndTime() - result.getStartTime()
            if (duration > slow) {
              logger.warn("test exceeded $slow ms: $desc.className :: $desc.name ($duration milliseconds)")
            }
          }
        }
        minHeapSize = "512m"
        maxHeapSize = "512m"
      }
    }
  }
}

subprojects { project ->
  if ([korkVersion, fiatVersion].any { it.endsWith("-SNAPSHOT") }) {
    logger.info("Enabling mavenLocal")
    repositories {
      mavenLocal()
    }
  }

  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7102'
    }
  }
}

defaultTasks ':clouddriver-web:run'
