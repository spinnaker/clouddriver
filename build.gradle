/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  ext {
    springBootVersion = "1.5.4.RELEASE"
  }
  repositories {
    jcenter()
    maven { url "http://spinnaker.bintray.com/gradle" }
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'com.netflix.spinnaker.gradle:spinnaker-gradle-project:3.16.0'
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
  }
}

allprojects {
  group = "com.netflix.spinnaker.clouddriver"
  apply plugin: 'spinnaker.project'
  apply plugin: 'groovy'

  ext {
    spinnakerDependenciesVersion = project.hasProperty('spinnakerDependenciesVersion') ? project.property('spinnakerDependenciesVersion') : '0.109.2'
  }

  def checkLocalVersions = [spinnakerDependenciesVersion: spinnakerDependenciesVersion]
  if (ext.has('versions')) {
    def extVers = ext.get('versions')
    if (extVers instanceof Map) {
      checkLocalVersions.putAll(extVers)
    }
  }

  def localVersions = checkLocalVersions.findAll { it.value.endsWith('-SNAPSHOT') }
  if (localVersions) {
    logger.info("Enabling mavenLocal repo for $localVersions")
    repositories {
      mavenLocal()
    }
  }

  spinnaker {
    dependenciesVersion = spinnakerDependenciesVersion
  }

  test {
    testLogging {
      exceptionFormat = 'full'
    }
    if (project.hasProperty('slowTest')) {
      long slow = 250
      try {
        slow = Long.parseLong(project.property('slowTest'))
      } catch (Exception ex) {
      }
      afterTest { desc, result ->
        long duration = result.getEndTime() - result.getStartTime()
        if (duration > slow) {
          logger.warn("test exceeded $slow ms: $desc.className :: $desc.name ($duration milliseconds)")
        }
      }
    }
    minHeapSize = "512m"
    maxHeapSize = "512m"
  }
}

subprojects { project ->

  configurations {
    all {
      exclude group: 'javax.servlet', module: 'servlet-api'
      exclude group: 'javax.ws.rs', module: 'jsr311-api'
      resolutionStrategy {
        force 'org.antlr:antlr-runtime:3.5.2'
        eachDependency {
          if (it.requested.group == 'asm' || it.requested.group == 'org.ow2.asm') {
            it.useTarget group: 'org.ow2.asm', name: 'asm-all', version: '5.0.3'
          }
          if (it.requested.group == 'junit') {
            it.useTarget group: 'junit', name: 'junit', version: '4.12'
          }
          if (it.requested.group == 'cglib' || it.requested.name == 'cglib') {
            it.useTarget group: 'cglib', name: 'cglib', version: '3.2.0'
          }
          if (it.requested.group == 'com.google.guava') {
            it.useTarget group: 'com.google.guava', name: 'guava', version: '18.0'
          }
          if (it.requested.group == 'antlr') {
            it.useTarget group: 'org.antlr', name: it.requested.name, version: '3.5.2'
          }
          if (it.requested.group == 'org.apache.xbean') {
            it.useVersion '4.3'
          }
        }
      }
    }
  }

  dependencies {
    compile spinnaker.dependency('groovy')
    spinnaker.group('test')
  }
}

defaultTasks ':clouddriver-web:bootRun'
